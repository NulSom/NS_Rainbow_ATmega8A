
NS_Rainbow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000bea  00000c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080006c  0080006c  00000c8a  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000068  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001af  00000000  00000000  00001513  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000de4  00000000  00000000  000016c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000047c  00000000  00000000  000024a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ccd  00000000  00000000  00002922  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  000035f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000300  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f74  00000000  00000000  00003a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000009d  00000000  00000000  00004984  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  00004a21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ee       	ldi	r30, 0xEA	; 234
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 37       	cpi	r26, 0x79	; 121
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	c5 c5       	rjmp	.+2954   	; 0xbe6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:

#define USELED	64						// Using LED Value


int main(void)
{	
  5e:	ff 92       	push	r15
  60:	0f 93       	push	r16
  62:	1f 93       	push	r17
  64:	cf 93       	push	r28
  66:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  68:	8f e3       	ldi	r24, 0x3F	; 63
  6a:	9c e9       	ldi	r25, 0x9C	; 156
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <main+0xe>
  70:	00 c0       	rjmp	.+0      	; 0x72 <main+0x14>
  72:	00 00       	nop
	*			                  -> NS-Rainbow_init(8, PB, 2);
	*
	****************************************************************************************************/

	_delay_ms(10);
	NS_Rainbow_init(USELED, PB, 0);
  74:	80 e4       	ldi	r24, 0x40	; 64
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	68 e3       	ldi	r22, 0x38	; 56
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	1e d2       	rcall	.+1084   	; 0x4ba <NS_Rainbow_init>


	setBrightness(50); 	// 0,1(OFF) ~ 255
  7e:	82 e3       	ldi	r24, 0x32	; 50
  80:	a0 d2       	rcall	.+1344   	; 0x5c2 <setBrightness>
  82:	d4 c0       	rjmp	.+424    	; 0x22c <main+0x1ce>
		/* Example Program */
		/* This example is for Rainbow Matrix */

		for(int i = 0; i < 8; i++)
		{
			line = i * 8;
  84:	f0 2e       	mov	r15, r16
  86:	ff 0c       	add	r15, r15
  88:	ff 0c       	add	r15, r15
  8a:	ff 0c       	add	r15, r15
			setColor(0 + line, 255, 0, 0);				// RED
  8c:	8f 2d       	mov	r24, r15
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	6f ef       	ldi	r22, 0xFF	; 255
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	f6 d0       	rcall	.+492    	; 0x284 <setColor>
			setColor(1 + line, 255, 94, 0);				// Orange
  98:	cf 2d       	mov	r28, r15
  9a:	d0 e0       	ldi	r29, 0x00	; 0
  9c:	ce 01       	movw	r24, r28
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	6f ef       	ldi	r22, 0xFF	; 255
  a2:	4e e5       	ldi	r20, 0x5E	; 94
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	ee d0       	rcall	.+476    	; 0x284 <setColor>
			setColor(2 + line, 255, 228, 0);			// Yellow
  a8:	ce 01       	movw	r24, r28
  aa:	02 96       	adiw	r24, 0x02	; 2
  ac:	6f ef       	ldi	r22, 0xFF	; 255
  ae:	44 ee       	ldi	r20, 0xE4	; 228
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	e8 d0       	rcall	.+464    	; 0x284 <setColor>
			setColor(3 + line, 29, 219, 22);			// Green
  b4:	ce 01       	movw	r24, r28
  b6:	03 96       	adiw	r24, 0x03	; 3
  b8:	6d e1       	ldi	r22, 0x1D	; 29
  ba:	4b ed       	ldi	r20, 0xDB	; 219
  bc:	26 e1       	ldi	r18, 0x16	; 22
  be:	e2 d0       	rcall	.+452    	; 0x284 <setColor>
			setColor(4 + line, 0, 0, 255);				// Blue
  c0:	ce 01       	movw	r24, r28
  c2:	04 96       	adiw	r24, 0x04	; 4
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	dc d0       	rcall	.+440    	; 0x284 <setColor>
			setColor(5 + line, 1, 0, 255);				// Dark Blue
  cc:	ce 01       	movw	r24, r28
  ce:	05 96       	adiw	r24, 0x05	; 5
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	d6 d0       	rcall	.+428    	; 0x284 <setColor>
			setColor(6 + line, 63, 0, 153);				// Purple
  d8:	ce 01       	movw	r24, r28
  da:	06 96       	adiw	r24, 0x06	; 6
  dc:	6f e3       	ldi	r22, 0x3F	; 63
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	29 e9       	ldi	r18, 0x99	; 153
  e2:	d0 d0       	rcall	.+416    	; 0x284 <setColor>
			setColor(7 + line, 255, 0, 221);			// Pink
  e4:	ce 01       	movw	r24, r28
  e6:	07 96       	adiw	r24, 0x07	; 7
  e8:	6f ef       	ldi	r22, 0xFF	; 255
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	2d ed       	ldi	r18, 0xDD	; 221
  ee:	ca d0       	rcall	.+404    	; 0x284 <setColor>

			show();
  f0:	8a d1       	rcall	.+788    	; 0x406 <show>
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	91 ee       	ldi	r25, 0xE1	; 225
  f6:	a4 e0       	ldi	r26, 0x04	; 4
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	a0 40       	sbci	r26, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x9a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0xa4>
 102:	00 00       	nop
	while(1)
	{
		/* Example Program */
		/* This example is for Rainbow Matrix */

		for(int i = 0; i < 8; i++)
 104:	0f 5f       	subi	r16, 0xFF	; 255
 106:	1f 4f       	sbci	r17, 0xFF	; 255
 108:	08 30       	cpi	r16, 0x08	; 8
 10a:	11 05       	cpc	r17, r1
 10c:	0c f4       	brge	.+2      	; 0x110 <main+0xb2>
 10e:	ba cf       	rjmp	.-140    	; 0x84 <main+0x26>
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	99 e6       	ldi	r25, 0x69	; 105
 114:	a8 e1       	ldi	r26, 0x18	; 24
 116:	81 50       	subi	r24, 0x01	; 1
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	a0 40       	sbci	r26, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0xb8>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0xc2>
 120:	00 00       	nop
			_delay_ms(100);
		}		
		_delay_ms(500);


		for(int i = USELED; i >= 0; i--)
 122:	c0 e4       	ldi	r28, 0x40	; 64
 124:	d0 e0       	ldi	r29, 0x00	; 0
		{
			cell_clear(i);
 126:	ce 01       	movw	r24, r28
 128:	46 d2       	rcall	.+1164   	; 0x5b6 <cell_clear>
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	96 e7       	ldi	r25, 0x76	; 118
 12e:	a1 e0       	ldi	r26, 0x01	; 1
 130:	81 50       	subi	r24, 0x01	; 1
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	a0 40       	sbci	r26, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0xd2>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xdc>
 13a:	00 00       	nop
			_delay_ms(100);
		}		
		_delay_ms(500);


		for(int i = USELED; i >= 0; i--)
 13c:	21 97       	sbiw	r28, 0x01	; 1
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	cf 3f       	cpi	r28, 0xFF	; 255
 142:	d9 07       	cpc	r29, r25
 144:	81 f7       	brne	.-32     	; 0x126 <main+0xc8>
 146:	08 e3       	ldi	r16, 0x38	; 56
		}

		for(int i = 7; i >= 0; i--)
		{
			line = i * 8;
			setColor_RGB(0 + line, 0xFF0000);			// RED
 148:	80 2f       	mov	r24, r16
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	6f ef       	ldi	r22, 0xFF	; 255
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	f5 d0       	rcall	.+490    	; 0x340 <setColor_RGB>
			setColor_RGB(1 + line, 0xFF5E00);			// Orange
 156:	c0 2f       	mov	r28, r16
 158:	d0 e0       	ldi	r29, 0x00	; 0
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	5e e5       	ldi	r21, 0x5E	; 94
 162:	6f ef       	ldi	r22, 0xFF	; 255
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	ec d0       	rcall	.+472    	; 0x340 <setColor_RGB>
			setColor_RGB(2 + line, 0xFFE400);			// Yellow
 168:	ce 01       	movw	r24, r28
 16a:	02 96       	adiw	r24, 0x02	; 2
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	54 ee       	ldi	r21, 0xE4	; 228
 170:	6f ef       	ldi	r22, 0xFF	; 255
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	e5 d0       	rcall	.+458    	; 0x340 <setColor_RGB>
			setColor_RGB(3 + line, 0x1DDB16);			// Green
 176:	ce 01       	movw	r24, r28
 178:	03 96       	adiw	r24, 0x03	; 3
 17a:	46 e1       	ldi	r20, 0x16	; 22
 17c:	5b ed       	ldi	r21, 0xDB	; 219
 17e:	6d e1       	ldi	r22, 0x1D	; 29
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	de d0       	rcall	.+444    	; 0x340 <setColor_RGB>
			setColor_RGB(4 + line, 0x0000FF);			// Blue
 184:	ce 01       	movw	r24, r28
 186:	04 96       	adiw	r24, 0x04	; 4
 188:	4f ef       	ldi	r20, 0xFF	; 255
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	d7 d0       	rcall	.+430    	; 0x340 <setColor_RGB>
			setColor_RGB(5 + line, 0x0100FF);			// Dark Blue
 192:	ce 01       	movw	r24, r28
 194:	05 96       	adiw	r24, 0x05	; 5
 196:	4f ef       	ldi	r20, 0xFF	; 255
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	d0 d0       	rcall	.+416    	; 0x340 <setColor_RGB>
			setColor_RGB(6 + line, 0x3F0099);			// Purple
 1a0:	ce 01       	movw	r24, r28
 1a2:	06 96       	adiw	r24, 0x06	; 6
 1a4:	49 e9       	ldi	r20, 0x99	; 153
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	6f e3       	ldi	r22, 0x3F	; 63
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	c9 d0       	rcall	.+402    	; 0x340 <setColor_RGB>
			setColor_RGB(7 + line, 0xFF00DD);			// Pink
 1ae:	ce 01       	movw	r24, r28
 1b0:	07 96       	adiw	r24, 0x07	; 7
 1b2:	4d ed       	ldi	r20, 0xDD	; 221
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	6f ef       	ldi	r22, 0xFF	; 255
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	c2 d0       	rcall	.+388    	; 0x340 <setColor_RGB>
		
			show();
 1bc:	24 d1       	rcall	.+584    	; 0x406 <show>
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	91 ee       	ldi	r25, 0xE1	; 225
 1c2:	a4 e0       	ldi	r26, 0x04	; 4
 1c4:	81 50       	subi	r24, 0x01	; 1
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	a0 40       	sbci	r26, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x166>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x170>
 1ce:	00 00       	nop
 1d0:	08 50       	subi	r16, 0x08	; 8
		{
			cell_clear(i);
			_delay_ms(30);
		}

		for(int i = 7; i >= 0; i--)
 1d2:	08 3f       	cpi	r16, 0xF8	; 248
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <main+0x17a>
 1d6:	b8 cf       	rjmp	.-144    	; 0x148 <main+0xea>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	99 e6       	ldi	r25, 0x69	; 105
 1dc:	a8 e1       	ldi	r26, 0x18	; 24
 1de:	81 50       	subi	r24, 0x01	; 1
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	a0 40       	sbci	r26, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0x180>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x18a>
 1e8:	00 00       	nop
			_delay_ms(100);
		}	
		_delay_ms(500);

	
		for(int i = 0; i <= USELED; i++)
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
		{
			cell_clear(i);
 1ee:	ce 01       	movw	r24, r28
 1f0:	e2 d1       	rcall	.+964    	; 0x5b6 <cell_clear>
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	96 e7       	ldi	r25, 0x76	; 118
 1f6:	a1 e0       	ldi	r26, 0x01	; 1
 1f8:	81 50       	subi	r24, 0x01	; 1
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	a0 40       	sbci	r26, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x19a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x1a4>
 202:	00 00       	nop
			_delay_ms(100);
		}	
		_delay_ms(500);

	
		for(int i = 0; i <= USELED; i++)
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	c1 34       	cpi	r28, 0x41	; 65
 208:	d1 05       	cpc	r29, r1
 20a:	89 f7       	brne	.-30     	; 0x1ee <main+0x190>
			_delay_ms(30);
		}


		for(int i = 0; i < 2; i++)
			rainbow(10);
 20c:	8a e0       	ldi	r24, 0x0A	; 10
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	ce d2       	rcall	.+1436   	; 0x7ae <rainbow>
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	cb d2       	rcall	.+1430   	; 0x7ae <rainbow>

		

		clear();
 218:	c0 d1       	rcall	.+896    	; 0x59a <clear>
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	93 ed       	ldi	r25, 0xD3	; 211
 21e:	a0 e3       	ldi	r26, 0x30	; 48
 220:	81 50       	subi	r24, 0x01	; 1
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	a0 40       	sbci	r26, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x1c2>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x1cc>
 22a:	00 00       	nop
	while(1)
	{
		/* Example Program */
		/* This example is for Rainbow Matrix */

		for(int i = 0; i < 8; i++)
 22c:	00 e0       	ldi	r16, 0x00	; 0
 22e:	10 e0       	ldi	r17, 0x00	; 0
 230:	6b cf       	rjmp	.-298    	; 0x108 <main+0xaa>

00000232 <rst_delay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	87 ec       	ldi	r24, 0xC7	; 199
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <rst_delay+0x4>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <rst_delay+0xa>
 23c:	00 00       	nop

volatile uint8_t *port;
volatile uint8_t maskPin;
volatile uint8_t brightness = 255;

void rst_delay(void) {_delay_us(50);}
 23e:	08 95       	ret

00000240 <delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 240:	20 ea       	ldi	r18, 0xA0	; 160
 242:	3f e0       	ldi	r19, 0x0F	; 15
void delay(uint32_t _mstime) {while(_mstime){_delay_loop_2(((F_CPU) / 4e3));_mstime--;}}
 244:	07 c0       	rjmp	.+14     	; 0x254 <delay+0x14>
 246:	f9 01       	movw	r30, r18
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <delay+0x8>
 24c:	61 50       	subi	r22, 0x01	; 1
 24e:	70 40       	sbci	r23, 0x00	; 0
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	61 15       	cp	r22, r1
 256:	71 05       	cpc	r23, r1
 258:	81 05       	cpc	r24, r1
 25a:	91 05       	cpc	r25, r1
 25c:	a1 f7       	brne	.-24     	; 0x246 <delay+0x6>
 25e:	08 95       	ret

00000260 <setPin>:
}


void setPin(uint8_t _port, uint8_t _bit)
{
	*(volatile uint8_t *)(_port - 0x01) |= ( 1 << _bit );
 260:	e8 2f       	mov	r30, r24
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	df 01       	movw	r26, r30
 266:	2e 91       	ld	r18, -X
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <setPin+0x12>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <setPin+0xe>
 276:	28 2b       	or	r18, r24
 278:	2c 93       	st	X, r18
	*(volatile uint8_t *)_port &= ~( 1 << _bit );
 27a:	90 81       	ld	r25, Z
 27c:	80 95       	com	r24
 27e:	89 23       	and	r24, r25
 280:	80 83       	st	Z, r24
}
 282:	08 95       	ret

00000284 <setColor>:


void setColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b)		// LED 64EA = ( n = 0 ~ 63 )
{
	if(n < nCells)
 284:	e0 91 6e 00 	lds	r30, 0x006E
 288:	f0 91 6f 00 	lds	r31, 0x006F
 28c:	8e 17       	cp	r24, r30
 28e:	9f 07       	cpc	r25, r31
 290:	08 f0       	brcs	.+2      	; 0x294 <setColor+0x10>
 292:	55 c0       	rjmp	.+170    	; 0x33e <setColor+0xba>
	{
		if(brightness < 0xFF)
 294:	30 91 64 00 	lds	r19, 0x0064
 298:	3f 3f       	cpi	r19, 0xFF	; 255
 29a:	09 f4       	brne	.+2      	; 0x29e <setColor+0x1a>
 29c:	3f c0       	rjmp	.+126    	; 0x31c <setColor+0x98>
		{
			if(brightness > 0x01)
 29e:	30 91 64 00 	lds	r19, 0x0064
 2a2:	32 30       	cpi	r19, 0x02	; 2
 2a4:	b0 f1       	brcs	.+108    	; 0x312 <setColor+0x8e>
			{
				uint16_t cb = brightness + 1, t = 0;
 2a6:	e0 91 64 00 	lds	r30, 0x0064
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	31 96       	adiw	r30, 0x01	; 1
    		
	    		t = (g|0x01) * cb;
 2ae:	41 60       	ori	r20, 0x01	; 1
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	4e 9f       	mul	r20, r30
 2b4:	d0 01       	movw	r26, r0
 2b6:	4f 9f       	mul	r20, r31
 2b8:	b0 0d       	add	r27, r0
 2ba:	5e 9f       	mul	r21, r30
 2bc:	b0 0d       	add	r27, r0
 2be:	11 24       	eor	r1, r1
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
 2c0:	a1 38       	cpi	r26, 0x81	; 129
 2c2:	b1 05       	cpc	r27, r1
 2c4:	20 f0       	brcs	.+8      	; 0x2ce <setColor+0x4a>
 2c6:	a0 58       	subi	r26, 0x80	; 128
 2c8:	b0 40       	sbci	r27, 0x00	; 0
 2ca:	4b 2f       	mov	r20, r27
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <setColor+0x4c>
 2ce:	40 e0       	ldi	r20, 0x00	; 0
	    		t = (r|0x01) * cb;
 2d0:	61 60       	ori	r22, 0x01	; 1
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	6e 9f       	mul	r22, r30
 2d6:	d0 01       	movw	r26, r0
 2d8:	6f 9f       	mul	r22, r31
 2da:	b0 0d       	add	r27, r0
 2dc:	7e 9f       	mul	r23, r30
 2de:	b0 0d       	add	r27, r0
 2e0:	11 24       	eor	r1, r1
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
 2e2:	a1 38       	cpi	r26, 0x81	; 129
 2e4:	b1 05       	cpc	r27, r1
 2e6:	20 f0       	brcs	.+8      	; 0x2f0 <setColor+0x6c>
 2e8:	a0 58       	subi	r26, 0x80	; 128
 2ea:	b0 40       	sbci	r27, 0x00	; 0
 2ec:	6b 2f       	mov	r22, r27
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <setColor+0x6e>
 2f0:	60 e0       	ldi	r22, 0x00	; 0
	    		t = (b|0x01) * cb;
 2f2:	21 60       	ori	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	2e 9f       	mul	r18, r30
 2f8:	d0 01       	movw	r26, r0
 2fa:	2f 9f       	mul	r18, r31
 2fc:	b0 0d       	add	r27, r0
 2fe:	3e 9f       	mul	r19, r30
 300:	b0 0d       	add	r27, r0
 302:	11 24       	eor	r1, r1
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 304:	a1 38       	cpi	r26, 0x81	; 129
 306:	b1 05       	cpc	r27, r1
 308:	40 f0       	brcs	.+16     	; 0x31a <setColor+0x96>
 30a:	a0 58       	subi	r26, 0x80	; 128
 30c:	b0 40       	sbci	r27, 0x00	; 0
 30e:	2b 2f       	mov	r18, r27
 310:	05 c0       	rjmp	.+10     	; 0x31c <setColor+0x98>
			}			
			else
			{
    			g = 0x00;
    			r = 0x00;
    			b = 0x00;
 312:	20 e0       	ldi	r18, 0x00	; 0
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
			}			
			else
			{
    			g = 0x00;
 314:	40 e0       	ldi	r20, 0x00	; 0
    			r = 0x00;
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	01 c0       	rjmp	.+2      	; 0x31c <setColor+0x98>
	    		t = (g|0x01) * cb;
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
	    		t = (r|0x01) * cb;
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 31a:	20 e0       	ldi	r18, 0x00	; 0
    			g = 0x00;
    			r = 0x00;
    			b = 0x00;
			}
		}
		uint8_t *p = &cells[n * 3];
 31c:	dc 01       	movw	r26, r24
 31e:	aa 0f       	add	r26, r26
 320:	bb 1f       	adc	r27, r27
 322:	a8 0f       	add	r26, r24
 324:	b9 1f       	adc	r27, r25
 326:	e0 91 72 00 	lds	r30, 0x0072
 32a:	f0 91 73 00 	lds	r31, 0x0073
 32e:	ea 0f       	add	r30, r26
 330:	fb 1f       	adc	r31, r27

		*p++ = g;
 332:	df 01       	movw	r26, r30
 334:	4d 93       	st	X+, r20
		*p++ = r;
 336:	61 83       	std	Z+1, r22	; 0x01
		*p = b;
 338:	11 96       	adiw	r26, 0x01	; 1
 33a:	2c 93       	st	X, r18
 33c:	11 97       	sbiw	r26, 0x01	; 1
 33e:	08 95       	ret

00000340 <setColor_RGB>:
	}
}


void setColor_RGB(uint16_t n, uint32_t c)
{
 340:	1f 93       	push	r17
	if(n < nCells)
 342:	20 91 6e 00 	lds	r18, 0x006E
 346:	30 91 6f 00 	lds	r19, 0x006F
 34a:	82 17       	cp	r24, r18
 34c:	93 07       	cpc	r25, r19
 34e:	08 f0       	brcs	.+2      	; 0x352 <setColor_RGB+0x12>
 350:	58 c0       	rjmp	.+176    	; 0x402 <setColor_RGB+0xc2>
	{
		uint8_t 
			r = (uint8_t)(c >> 16),
			g = (uint8_t)(c >>  8),
 352:	15 2f       	mov	r17, r21
			b = (uint8_t)c;

		if(brightness < 0xFF)
 354:	20 91 64 00 	lds	r18, 0x0064
 358:	2f 3f       	cpi	r18, 0xFF	; 255
 35a:	09 f4       	brne	.+2      	; 0x35e <setColor_RGB+0x1e>
 35c:	41 c0       	rjmp	.+130    	; 0x3e0 <setColor_RGB+0xa0>
		{
			if(brightness > 0x01)
 35e:	20 91 64 00 	lds	r18, 0x0064
 362:	22 30       	cpi	r18, 0x02	; 2
 364:	c0 f1       	brcs	.+112    	; 0x3d6 <setColor_RGB+0x96>
			{
				uint16_t cb = brightness + 1, t = 0;
 366:	20 91 64 00 	lds	r18, 0x0064
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	2f 5f       	subi	r18, 0xFF	; 255
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
    		
	    		t = (g|0x01) * cb;
 370:	11 60       	ori	r17, 0x01	; 1
 372:	a1 2f       	mov	r26, r17
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	a2 9f       	mul	r26, r18
 378:	f0 01       	movw	r30, r0
 37a:	a3 9f       	mul	r26, r19
 37c:	f0 0d       	add	r31, r0
 37e:	b2 9f       	mul	r27, r18
 380:	f0 0d       	add	r31, r0
 382:	11 24       	eor	r1, r1
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
 384:	e1 38       	cpi	r30, 0x81	; 129
 386:	f1 05       	cpc	r31, r1
 388:	20 f0       	brcs	.+8      	; 0x392 <setColor_RGB+0x52>
 38a:	e0 58       	subi	r30, 0x80	; 128
 38c:	f0 40       	sbci	r31, 0x00	; 0
 38e:	1f 2f       	mov	r17, r31
 390:	01 c0       	rjmp	.+2      	; 0x394 <setColor_RGB+0x54>
 392:	10 e0       	ldi	r17, 0x00	; 0
	    		t = (r|0x01) * cb;
 394:	61 60       	ori	r22, 0x01	; 1
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	62 9f       	mul	r22, r18
 39a:	f0 01       	movw	r30, r0
 39c:	63 9f       	mul	r22, r19
 39e:	f0 0d       	add	r31, r0
 3a0:	72 9f       	mul	r23, r18
 3a2:	f0 0d       	add	r31, r0
 3a4:	11 24       	eor	r1, r1
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
 3a6:	e1 38       	cpi	r30, 0x81	; 129
 3a8:	f1 05       	cpc	r31, r1
 3aa:	20 f0       	brcs	.+8      	; 0x3b4 <setColor_RGB+0x74>
 3ac:	e0 58       	subi	r30, 0x80	; 128
 3ae:	f0 40       	sbci	r31, 0x00	; 0
 3b0:	6f 2f       	mov	r22, r31
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <setColor_RGB+0x76>
 3b4:	60 e0       	ldi	r22, 0x00	; 0
	    		t = (b|0x01) * cb;
 3b6:	41 60       	ori	r20, 0x01	; 1
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	42 9f       	mul	r20, r18
 3bc:	f0 01       	movw	r30, r0
 3be:	43 9f       	mul	r20, r19
 3c0:	f0 0d       	add	r31, r0
 3c2:	52 9f       	mul	r21, r18
 3c4:	f0 0d       	add	r31, r0
 3c6:	11 24       	eor	r1, r1
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 3c8:	e1 38       	cpi	r30, 0x81	; 129
 3ca:	f1 05       	cpc	r31, r1
 3cc:	40 f0       	brcs	.+16     	; 0x3de <setColor_RGB+0x9e>
 3ce:	e0 58       	subi	r30, 0x80	; 128
 3d0:	f0 40       	sbci	r31, 0x00	; 0
 3d2:	4f 2f       	mov	r20, r31
 3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <setColor_RGB+0xa0>
			}			
			else
			{
    			g = 0x00;
    			r = 0x00;
    			b = 0x00;
 3d6:	40 e0       	ldi	r20, 0x00	; 0
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
			}			
			else
			{
    			g = 0x00;
 3d8:	10 e0       	ldi	r17, 0x00	; 0
    			r = 0x00;
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <setColor_RGB+0xa0>
	    		t = (g|0x01) * cb;
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
	    		t = (r|0x01) * cb;
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 3de:	40 e0       	ldi	r20, 0x00	; 0
    			r = 0x00;
    			b = 0x00;
			}
		}

		uint8_t *p = &cells[n * 3];
 3e0:	9c 01       	movw	r18, r24
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	28 0f       	add	r18, r24
 3e8:	39 1f       	adc	r19, r25
 3ea:	e0 91 72 00 	lds	r30, 0x0072
 3ee:	f0 91 73 00 	lds	r31, 0x0073
 3f2:	e2 0f       	add	r30, r18
 3f4:	f3 1f       	adc	r31, r19

		*p++ = g;
 3f6:	df 01       	movw	r26, r30
 3f8:	1d 93       	st	X+, r17
		*p++ = r;
 3fa:	61 83       	std	Z+1, r22	; 0x01
		*p = b;
 3fc:	11 96       	adiw	r26, 0x01	; 1
 3fe:	4c 93       	st	X, r20
 400:	11 97       	sbiw	r26, 0x01	; 1
	}
}
 402:	1f 91       	pop	r17
 404:	08 95       	ret

00000406 <show>:


void show(void)
{
 406:	df 93       	push	r29
 408:	cf 93       	push	r28
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	27 97       	sbiw	r28, 0x07	; 7
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	f8 94       	cli
 414:	de bf       	out	0x3e, r29	; 62
 416:	0f be       	out	0x3f, r0	; 63
 418:	cd bf       	out	0x3d, r28	; 61
	rst_delay();								// 50us Delay
 41a:	0b df       	rcall	.-490    	; 0x232 <rst_delay>
	asm volatile("cli");						// interrupt Disable
 41c:	f8 94       	cli

	volatile uint16_t loopcnt_i = nBytes;		// loop counter : led * 3 byte
 41e:	80 91 6c 00 	lds	r24, 0x006C
 422:	90 91 6d 00 	lds	r25, 0x006D
 426:	9f 83       	std	Y+7, r25	; 0x07
 428:	8e 83       	std	Y+6, r24	; 0x06

	volatile uint8_t
		*ptr = cells,
		curbyte = *ptr++;
 42a:	a0 91 72 00 	lds	r26, 0x0072
 42e:	b0 91 73 00 	lds	r27, 0x0073
 432:	8d 91       	ld	r24, X+
 434:	89 83       	std	Y+1, r24	; 0x01

	volatile uint8_t next, bit, high, low;

	high = *port | maskPin;
 436:	e0 91 70 00 	lds	r30, 0x0070
 43a:	f0 91 71 00 	lds	r31, 0x0071
 43e:	80 81       	ld	r24, Z
 440:	90 91 74 00 	lds	r25, 0x0074
 444:	89 2b       	or	r24, r25
 446:	8c 83       	std	Y+4, r24	; 0x04
	low = *port & ~maskPin;
 448:	90 81       	ld	r25, Z
 44a:	80 91 74 00 	lds	r24, 0x0074
 44e:	80 95       	com	r24
 450:	89 23       	and	r24, r25
 452:	8d 83       	std	Y+5, r24	; 0x05

	next = low;
 454:	8d 81       	ldd	r24, Y+5	; 0x05
 456:	8a 83       	std	Y+2, r24	; 0x02
	bit = 8;
 458:	88 e0       	ldi	r24, 0x08	; 8
 45a:	8b 83       	std	Y+3, r24	; 0x03

	asm volatile(
 45c:	5c 81       	ldd	r21, Y+4	; 0x04
 45e:	6d 81       	ldd	r22, Y+5	; 0x05
 460:	49 81       	ldd	r20, Y+1	; 0x01
 462:	3b 81       	ldd	r19, Y+3	; 0x03
 464:	2a 81       	ldd	r18, Y+2	; 0x02
 466:	8e 81       	ldd	r24, Y+6	; 0x06
 468:	9f 81       	ldd	r25, Y+7	; 0x07

0000046a <run>:
 46a:	50 83       	st	Z, r21
 46c:	47 fd       	sbrc	r20, 7
 46e:	25 2f       	mov	r18, r21
 470:	20 83       	st	Z, r18
 472:	26 2f       	mov	r18, r22
 474:	3a 95       	dec	r19
 476:	39 f0       	breq	.+14     	; 0x486 <nextByte>
 478:	44 0f       	add	r20, r20
 47a:	00 c0       	rjmp	.+0      	; 0x47c <run+0x12>
 47c:	00 00       	nop
 47e:	60 83       	st	Z, r22
 480:	00 c0       	rjmp	.+0      	; 0x482 <run+0x18>
 482:	00 00       	nop
 484:	f2 cf       	rjmp	.-28     	; 0x46a <run>

00000486 <nextByte>:
 486:	4d 91       	ld	r20, X+
 488:	60 83       	st	Z, r22
 48a:	38 e0       	ldi	r19, 0x08	; 8
 48c:	00 00       	nop
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	61 f7       	brne	.-40     	; 0x46a <run>
 492:	f0 93 71 00 	sts	0x0071, r31
 496:	e0 93 70 00 	sts	0x0070, r30
 49a:	49 83       	std	Y+1, r20	; 0x01
 49c:	3b 83       	std	Y+3, r19	; 0x03
 49e:	2a 83       	std	Y+2, r18	; 0x02
 4a0:	9f 83       	std	Y+7, r25	; 0x07
 4a2:	8e 83       	std	Y+6, r24	; 0x06
		[count] "+w" (loopcnt_i)
		: [ptr]   "e"  (ptr),
		[high]  "r"  (high),
		[low]   "r"  (low));

	asm volatile("sei");						// interrupt Enable
 4a4:	78 94       	sei
	rst_delay();								// 50us Delay	
 4a6:	c5 de       	rcall	.-630    	; 0x232 <rst_delay>
}
 4a8:	27 96       	adiw	r28, 0x07	; 7
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	cf 91       	pop	r28
 4b6:	df 91       	pop	r29
 4b8:	08 95       	ret

000004ba <NS_Rainbow_init>:
void delay(uint32_t _mstime) {while(_mstime){_delay_loop_2(((F_CPU) / 4e3));_mstime--;}}


// Initializer Func
void NS_Rainbow_init(uint16_t _numled, volatile uint8_t _port, uint8_t _outbit)
{
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	df 93       	push	r29
 4c0:	cf 93       	push	r28
 4c2:	00 d0       	rcall	.+0      	; 0x4c4 <NS_Rainbow_init+0xa>
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	8c 01       	movw	r16, r24
 4ca:	69 83       	std	Y+1, r22	; 0x01
	setPin(_port, _outbit);
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
 4ce:	64 2f       	mov	r22, r20
 4d0:	4a 83       	std	Y+2, r20	; 0x02
 4d2:	c6 de       	rcall	.-628    	; 0x260 <setPin>
	port = (volatile uint8_t *)_port;
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	80 93 70 00 	sts	0x0070, r24
 4da:	10 92 71 00 	sts	0x0071, r1
	maskPin = ( 1 << _outbit );
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	4a 81       	ldd	r20, Y+2	; 0x02
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <NS_Rainbow_init+0x30>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	4a 95       	dec	r20
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <NS_Rainbow_init+0x2c>
 4ee:	80 93 74 00 	sts	0x0074, r24
	
	nCells		= _numled;
 4f2:	10 93 6f 00 	sts	0x006F, r17
 4f6:	00 93 6e 00 	sts	0x006E, r16
	nBytes		= maxLEDBytes;
 4fa:	80 91 62 00 	lds	r24, 0x0062
 4fe:	90 91 63 00 	lds	r25, 0x0063
 502:	90 93 6d 00 	sts	0x006D, r25
 506:	80 93 6c 00 	sts	0x006C, r24

	brightness = DEFALUT_BRIGHT;						
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	80 93 64 00 	sts	0x0064, r24
		
	if(cells = (uint8_t *)malloc(nBytes))		// MAXLED(Default=64) Size LED Clear
 510:	80 91 6c 00 	lds	r24, 0x006C
 514:	90 91 6d 00 	lds	r25, 0x006D
 518:	2c d2       	rcall	.+1112   	; 0x972 <malloc>
 51a:	90 93 73 00 	sts	0x0073, r25
 51e:	80 93 72 00 	sts	0x0072, r24
 522:	00 97       	sbiw	r24, 0x00	; 0
 524:	41 f0       	breq	.+16     	; 0x536 <NS_Rainbow_init+0x7c>
		memset(cells, 0, nBytes);
 526:	20 91 6c 00 	lds	r18, 0x006C
 52a:	30 91 6d 00 	lds	r19, 0x006D
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	a9 01       	movw	r20, r18
 534:	51 d3       	rcall	.+1698   	; 0xbd8 <memset>
	show();
 536:	67 df       	rcall	.-306    	; 0x406 <show>
	free(cells);
 538:	80 91 72 00 	lds	r24, 0x0072
 53c:	90 91 73 00 	lds	r25, 0x0073
 540:	b2 d2       	rcall	.+1380   	; 0xaa6 <free>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	90 e7       	ldi	r25, 0x70	; 112
 546:	a2 e0       	ldi	r26, 0x02	; 2
 548:	81 50       	subi	r24, 0x01	; 1
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	a0 40       	sbci	r26, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <NS_Rainbow_init+0x8e>
 550:	00 c0       	rjmp	.+0      	; 0x552 <NS_Rainbow_init+0x98>
 552:	00 00       	nop
	_delay_ms(50);								// Stabilizer Delay

	nBytes = _numled * 3;
 554:	c8 01       	movw	r24, r16
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	80 0f       	add	r24, r16
 55c:	91 1f       	adc	r25, r17
 55e:	90 93 6d 00 	sts	0x006D, r25
 562:	80 93 6c 00 	sts	0x006C, r24
	if(cells = (uint8_t *)malloc(nBytes))
 566:	80 91 6c 00 	lds	r24, 0x006C
 56a:	90 91 6d 00 	lds	r25, 0x006D
 56e:	01 d2       	rcall	.+1026   	; 0x972 <malloc>
 570:	90 93 73 00 	sts	0x0073, r25
 574:	80 93 72 00 	sts	0x0072, r24
 578:	00 97       	sbiw	r24, 0x00	; 0
 57a:	41 f0       	breq	.+16     	; 0x58c <NS_Rainbow_init+0xd2>
		memset(cells, 0, nBytes);
 57c:	20 91 6c 00 	lds	r18, 0x006C
 580:	30 91 6d 00 	lds	r19, 0x006D
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	a9 01       	movw	r20, r18
 58a:	26 d3       	rcall	.+1612   	; 0xbd8 <memset>
	
}
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	cf 91       	pop	r28
 592:	df 91       	pop	r29
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	08 95       	ret

0000059a <clear>:
}


void clear(void)
{
	memset(cells, 0, nBytes);
 59a:	20 91 6c 00 	lds	r18, 0x006C
 59e:	30 91 6d 00 	lds	r19, 0x006D
 5a2:	80 91 72 00 	lds	r24, 0x0072
 5a6:	90 91 73 00 	lds	r25, 0x0073
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	a9 01       	movw	r20, r18
 5b0:	13 d3       	rcall	.+1574   	; 0xbd8 <memset>
	show();
 5b2:	29 df       	rcall	.-430    	; 0x406 <show>
}
 5b4:	08 95       	ret

000005b6 <cell_clear>:


void cell_clear(uint16_t nCell)
{
	setColor(nCell, 0, 0, 0);
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	63 de       	rcall	.-826    	; 0x284 <setColor>
	show();
 5be:	23 df       	rcall	.-442    	; 0x406 <show>
}
 5c0:	08 95       	ret

000005c2 <setBrightness>:



void setBrightness(uint8_t b)
{
 5c2:	4f 92       	push	r4
 5c4:	5f 92       	push	r5
 5c6:	6f 92       	push	r6
 5c8:	7f 92       	push	r7
 5ca:	8f 92       	push	r8
 5cc:	9f 92       	push	r9
 5ce:	af 92       	push	r10
 5d0:	bf 92       	push	r11
 5d2:	cf 92       	push	r12
 5d4:	df 92       	push	r13
 5d6:	ef 92       	push	r14
 5d8:	ff 92       	push	r15
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	18 2f       	mov	r17, r24
	if( b != brightness )
 5e2:	80 91 64 00 	lds	r24, 0x0064
 5e6:	18 17       	cp	r17, r24
 5e8:	09 f4       	brne	.+2      	; 0x5ec <setBrightness+0x2a>
 5ea:	ac c0       	rjmp	.+344    	; 0x744 <setBrightness+0x182>
	{
		uint8_t *ptr = cells;
 5ec:	30 91 72 00 	lds	r19, 0x0072
 5f0:	20 91 73 00 	lds	r18, 0x0073
		uint16_t nb = b + 1, cb = brightness + 1;
 5f4:	41 2e       	mov	r4, r17
 5f6:	55 24       	eor	r5, r5
 5f8:	08 94       	sec
 5fa:	41 1c       	adc	r4, r1
 5fc:	51 1c       	adc	r5, r1
 5fe:	80 91 64 00 	lds	r24, 0x0064
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	01 96       	adiw	r24, 0x01	; 1
	
		if (b < 1)
 606:	11 23       	and	r17, r17
 608:	91 f5       	brne	.+100    	; 0x66e <setBrightness+0xac>
 60a:	a9 01       	movw	r20, r18
 60c:	e5 2e       	mov	r14, r21
 60e:	e7 01       	movw	r28, r14
 610:	7e 01       	movw	r14, r28
 612:	f2 2e       	mov	r15, r18
 614:	e7 01       	movw	r28, r14
 616:	67 01       	movw	r12, r14
 618:	ee 24       	eor	r14, r14
 61a:	ff 24       	eor	r15, r15
		{
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
 61c:	4c 01       	movw	r8, r24
 61e:	aa 24       	eor	r10, r10
 620:	bb 24       	eor	r11, r11
 622:	1d c0       	rjmp	.+58     	; 0x65e <setBrightness+0x9c>
 624:	f6 01       	movw	r30, r12
 626:	61 91       	ld	r22, Z+
 628:	6f 01       	movw	r12, r30
 62a:	66 23       	and	r22, r22
 62c:	99 f0       	breq	.+38     	; 0x654 <setBrightness+0x92>
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	6f 5f       	subi	r22, 0xFF	; 255
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	88 27       	eor	r24, r24
 636:	77 fd       	sbrc	r23, 7
 638:	80 95       	com	r24
 63a:	98 2f       	mov	r25, r24
 63c:	cb 01       	movw	r24, r22
 63e:	77 27       	eor	r23, r23
 640:	66 27       	eor	r22, r22
 642:	a5 01       	movw	r20, r10
 644:	94 01       	movw	r18, r8
 646:	73 d1       	rcall	.+742    	; 0x92e <__udivmodsi4>
 648:	20 58       	subi	r18, 0x80	; 128
 64a:	30 40       	sbci	r19, 0x00	; 0
 64c:	40 40       	sbci	r20, 0x00	; 0
 64e:	50 40       	sbci	r21, 0x00	; 0
 650:	38 83       	st	Y, r19
 652:	01 c0       	rjmp	.+2      	; 0x656 <setBrightness+0x94>
 654:	18 82       	st	Y, r1
		uint8_t *ptr = cells;
		uint16_t nb = b + 1, cb = brightness + 1;
	
		if (b < 1)
		{
			for(uint16_t i = 0; i < nBytes; i++)
 656:	08 94       	sec
 658:	e1 1c       	adc	r14, r1
 65a:	f1 1c       	adc	r15, r1
 65c:	21 96       	adiw	r28, 0x01	; 1
 65e:	80 91 6c 00 	lds	r24, 0x006C
 662:	90 91 6d 00 	lds	r25, 0x006D
 666:	e8 16       	cp	r14, r24
 668:	f9 06       	cpc	r15, r25
 66a:	e0 f2       	brcs	.-72     	; 0x624 <setBrightness+0x62>
 66c:	69 c0       	rjmp	.+210    	; 0x740 <setBrightness+0x17e>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
 66e:	1f 3f       	cpi	r17, 0xFF	; 255
 670:	89 f0       	breq	.+34     	; 0x694 <setBrightness+0xd2>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
 672:	54 2c       	mov	r5, r4
 674:	44 24       	eor	r4, r4
 676:	66 24       	eor	r6, r6
 678:	77 24       	eor	r7, r7
 67a:	a9 01       	movw	r20, r18
 67c:	e5 2e       	mov	r14, r21
 67e:	e7 01       	movw	r28, r14
 680:	7e 01       	movw	r14, r28
 682:	f4 2e       	mov	r15, r20
 684:	e7 01       	movw	r28, r14
 686:	67 01       	movw	r12, r14
 688:	ee 24       	eor	r14, r14
 68a:	ff 24       	eor	r15, r15
 68c:	4c 01       	movw	r8, r24
 68e:	aa 24       	eor	r10, r10
 690:	bb 24       	eor	r11, r11
 692:	4f c0       	rjmp	.+158    	; 0x732 <setBrightness+0x170>
 694:	a9 01       	movw	r20, r18
 696:	e5 2f       	mov	r30, r21
 698:	ef 01       	movw	r28, r30
 69a:	7e 01       	movw	r14, r28
 69c:	f4 2e       	mov	r15, r20
 69e:	e7 01       	movw	r28, r14
		if (b < 1)
		{
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
 6a0:	67 01       	movw	r12, r14
 6a2:	ee 24       	eor	r14, r14
 6a4:	ff 24       	eor	r15, r15
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
 6a6:	4c 01       	movw	r8, r24
 6a8:	aa 24       	eor	r10, r10
 6aa:	bb 24       	eor	r11, r11
 6ac:	1d c0       	rjmp	.+58     	; 0x6e8 <setBrightness+0x126>
 6ae:	f6 01       	movw	r30, r12
 6b0:	61 91       	ld	r22, Z+
 6b2:	6f 01       	movw	r12, r30
 6b4:	66 23       	and	r22, r22
 6b6:	99 f0       	breq	.+38     	; 0x6de <setBrightness+0x11c>
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	88 27       	eor	r24, r24
 6c0:	77 fd       	sbrc	r23, 7
 6c2:	80 95       	com	r24
 6c4:	98 2f       	mov	r25, r24
 6c6:	cb 01       	movw	r24, r22
 6c8:	77 27       	eor	r23, r23
 6ca:	66 27       	eor	r22, r22
 6cc:	a5 01       	movw	r20, r10
 6ce:	94 01       	movw	r18, r8
 6d0:	2e d1       	rcall	.+604    	; 0x92e <__udivmodsi4>
 6d2:	20 58       	subi	r18, 0x80	; 128
 6d4:	30 40       	sbci	r19, 0x00	; 0
 6d6:	40 40       	sbci	r20, 0x00	; 0
 6d8:	50 40       	sbci	r21, 0x00	; 0
 6da:	38 83       	st	Y, r19
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <setBrightness+0x11e>
 6de:	18 82       	st	Y, r1
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
		{
			for (uint16_t i = 0; i < nBytes; i++)
 6e0:	08 94       	sec
 6e2:	e1 1c       	adc	r14, r1
 6e4:	f1 1c       	adc	r15, r1
 6e6:	21 96       	adiw	r28, 0x01	; 1
 6e8:	80 91 6c 00 	lds	r24, 0x006C
 6ec:	90 91 6d 00 	lds	r25, 0x006D
 6f0:	e8 16       	cp	r14, r24
 6f2:	f9 06       	cpc	r15, r25
 6f4:	e0 f2       	brcs	.-72     	; 0x6ae <setBrightness+0xec>
 6f6:	24 c0       	rjmp	.+72     	; 0x740 <setBrightness+0x17e>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
 6f8:	f6 01       	movw	r30, r12
 6fa:	21 91       	ld	r18, Z+
 6fc:	6f 01       	movw	r12, r30
 6fe:	22 23       	and	r18, r18
 700:	99 f0       	breq	.+38     	; 0x728 <setBrightness+0x166>
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	2f 5f       	subi	r18, 0xFF	; 255
 706:	3f 4f       	sbci	r19, 0xFF	; 255
 708:	44 27       	eor	r20, r20
 70a:	37 fd       	sbrc	r19, 7
 70c:	40 95       	com	r20
 70e:	54 2f       	mov	r21, r20
 710:	c3 01       	movw	r24, r6
 712:	b2 01       	movw	r22, r4
 714:	cd d0       	rcall	.+410    	; 0x8b0 <__mulsi3>
 716:	a5 01       	movw	r20, r10
 718:	94 01       	movw	r18, r8
 71a:	09 d1       	rcall	.+530    	; 0x92e <__udivmodsi4>
 71c:	20 58       	subi	r18, 0x80	; 128
 71e:	30 40       	sbci	r19, 0x00	; 0
 720:	40 40       	sbci	r20, 0x00	; 0
 722:	50 40       	sbci	r21, 0x00	; 0
 724:	38 83       	st	Y, r19
 726:	01 c0       	rjmp	.+2      	; 0x72a <setBrightness+0x168>
 728:	18 82       	st	Y, r1
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
 72a:	08 94       	sec
 72c:	e1 1c       	adc	r14, r1
 72e:	f1 1c       	adc	r15, r1
 730:	21 96       	adiw	r28, 0x01	; 1
 732:	80 91 6c 00 	lds	r24, 0x006C
 736:	90 91 6d 00 	lds	r25, 0x006D
 73a:	e8 16       	cp	r14, r24
 73c:	f9 06       	cpc	r15, r25
 73e:	e0 f2       	brcs	.-72     	; 0x6f8 <setBrightness+0x136>
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		brightness = b;	
 740:	10 93 64 00 	sts	0x0064, r17
	}
}
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	ff 90       	pop	r15
 74c:	ef 90       	pop	r14
 74e:	df 90       	pop	r13
 750:	cf 90       	pop	r12
 752:	bf 90       	pop	r11
 754:	af 90       	pop	r10
 756:	9f 90       	pop	r9
 758:	8f 90       	pop	r8
 75a:	7f 90       	pop	r7
 75c:	6f 90       	pop	r6
 75e:	5f 90       	pop	r5
 760:	4f 90       	pop	r4
 762:	08 95       	ret

00000764 <RGBtoColor>:


uint32_t RGBtoColor(uint8_t r, uint8_t g, uint8_t b)
{
 764:	ef 92       	push	r14
 766:	ff 92       	push	r15
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	e4 2e       	mov	r14, r20
	return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 76e:	26 2f       	mov	r18, r22
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	54 2f       	mov	r21, r20
 778:	43 2f       	mov	r20, r19
 77a:	32 2f       	mov	r19, r18
 77c:	22 27       	eor	r18, r18
 77e:	ff 24       	eor	r15, r15
 780:	00 e0       	ldi	r16, 0x00	; 0
 782:	10 e0       	ldi	r17, 0x00	; 0
 784:	2e 29       	or	r18, r14
 786:	3f 29       	or	r19, r15
 788:	40 2b       	or	r20, r16
 78a:	51 2b       	or	r21, r17
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	a0 e0       	ldi	r26, 0x00	; 0
 790:	b0 e0       	ldi	r27, 0x00	; 0
 792:	dc 01       	movw	r26, r24
 794:	99 27       	eor	r25, r25
 796:	88 27       	eor	r24, r24
 798:	28 2b       	or	r18, r24
 79a:	39 2b       	or	r19, r25
 79c:	4a 2b       	or	r20, r26
 79e:	5b 2b       	or	r21, r27
}
 7a0:	b9 01       	movw	r22, r18
 7a2:	ca 01       	movw	r24, r20
 7a4:	1f 91       	pop	r17
 7a6:	0f 91       	pop	r16
 7a8:	ff 90       	pop	r15
 7aa:	ef 90       	pop	r14
 7ac:	08 95       	ret

000007ae <rainbow>:



void rainbow(uint16_t interval)
{
 7ae:	6f 92       	push	r6
 7b0:	7f 92       	push	r7
 7b2:	8f 92       	push	r8
 7b4:	9f 92       	push	r9
 7b6:	af 92       	push	r10
 7b8:	bf 92       	push	r11
 7ba:	cf 92       	push	r12
 7bc:	df 92       	push	r13
 7be:	ef 92       	push	r14
 7c0:	ff 92       	push	r15
 7c2:	0f 93       	push	r16
 7c4:	1f 93       	push	r17
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
	uint16_t n = nCells;
 7ca:	e0 90 6e 00 	lds	r14, 0x006E
 7ce:	f0 90 6f 00 	lds	r15, 0x006F

	for(uint16_t j=0; j<255; j++) 
 7d2:	00 e0       	ldi	r16, 0x00	; 0
 7d4:	10 e0       	ldi	r17, 0x00	; 0
	{  // one cycle 
		for(uint16_t i=0; i<n; i++) 
		{
			uint8_t r_pos = (((i<<8) -  i) / n + j) % 0xFF;
 7d6:	3f ef       	ldi	r19, 0xFF	; 255
 7d8:	83 2e       	mov	r8, r19
 7da:	91 2c       	mov	r9, r1
			uint8_t sect = (r_pos / 0x55) % 0x03, pos = (r_pos % 0x55) * 0x03;
 7dc:	25 e5       	ldi	r18, 0x55	; 85
 7de:	72 2e       	mov	r7, r18
 7e0:	b3 e0       	ldi	r27, 0x03	; 3
 7e2:	6b 2e       	mov	r6, r27
					setColor_RGB(i, RGBtoColor(pos, 0x00, 0xFF - pos)); break;
			}  
		}
	
		show();
		delay(interval);
 7e4:	5c 01       	movw	r10, r24
 7e6:	cc 24       	eor	r12, r12
 7e8:	dd 24       	eor	r13, r13
 7ea:	50 c0       	rjmp	.+160    	; 0x88c <rainbow+0xde>

	for(uint16_t j=0; j<255; j++) 
	{  // one cycle 
		for(uint16_t i=0; i<n; i++) 
		{
			uint8_t r_pos = (((i<<8) -  i) / n + j) % 0xFF;
 7ec:	9c 2f       	mov	r25, r28
 7ee:	88 27       	eor	r24, r24
 7f0:	8c 1b       	sub	r24, r28
 7f2:	9d 0b       	sbc	r25, r29
 7f4:	b7 01       	movw	r22, r14
 7f6:	87 d0       	rcall	.+270    	; 0x906 <__udivmodhi4>
 7f8:	60 0f       	add	r22, r16
 7fa:	71 1f       	adc	r23, r17
 7fc:	cb 01       	movw	r24, r22
 7fe:	b4 01       	movw	r22, r8
 800:	82 d0       	rcall	.+260    	; 0x906 <__udivmodhi4>
			uint8_t sect = (r_pos / 0x55) % 0x03, pos = (r_pos % 0x55) * 0x03;
 802:	67 2d       	mov	r22, r7
 804:	74 d0       	rcall	.+232    	; 0x8ee <__udivmodqi4>
 806:	29 2f       	mov	r18, r25
 808:	22 0f       	add	r18, r18
 80a:	29 0f       	add	r18, r25
 80c:	66 2d       	mov	r22, r6
 80e:	6f d0       	rcall	.+222    	; 0x8ee <__udivmodqi4>
 810:	39 2f       	mov	r19, r25

			switch(sect) 
 812:	91 30       	cpi	r25, 0x01	; 1
 814:	99 f0       	breq	.+38     	; 0x83c <rainbow+0x8e>
 816:	42 2f       	mov	r20, r18
 818:	40 95       	com	r20
 81a:	82 2f       	mov	r24, r18
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	a0 e0       	ldi	r26, 0x00	; 0
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	32 30       	cpi	r19, 0x02	; 2
 824:	c9 f0       	breq	.+50     	; 0x858 <rainbow+0xaa>
}


uint32_t RGBtoColor(uint8_t r, uint8_t g, uint8_t b)
{
	return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	ba 01       	movw	r22, r20
 82e:	55 27       	eor	r21, r21
 830:	44 27       	eor	r20, r20
 832:	ba 2f       	mov	r27, r26
 834:	a9 2f       	mov	r26, r25
 836:	98 2f       	mov	r25, r24
 838:	88 27       	eor	r24, r24
 83a:	14 c0       	rjmp	.+40     	; 0x864 <rainbow+0xb6>
			{
				case 0: 
					setColor_RGB(i, RGBtoColor(0xFF - pos, pos, 0x00)); break;

				case 1: 
					setColor_RGB(i, RGBtoColor(0x00, 0xFF - pos, pos)); break;
 83c:	42 2f       	mov	r20, r18
 83e:	40 95       	com	r20
}


uint32_t RGBtoColor(uint8_t r, uint8_t g, uint8_t b)
{
	return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 840:	50 e0       	ldi	r21, 0x00	; 0
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	76 2f       	mov	r23, r22
 848:	65 2f       	mov	r22, r21
 84a:	54 2f       	mov	r21, r20
 84c:	44 27       	eor	r20, r20
 84e:	82 2f       	mov	r24, r18
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	a0 e0       	ldi	r26, 0x00	; 0
 854:	b0 e0       	ldi	r27, 0x00	; 0
 856:	06 c0       	rjmp	.+12     	; 0x864 <rainbow+0xb6>
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	dc 01       	movw	r26, r24
 860:	99 27       	eor	r25, r25
 862:	88 27       	eor	r24, r24
 864:	48 2b       	or	r20, r24
 866:	59 2b       	or	r21, r25
 868:	6a 2b       	or	r22, r26
 86a:	7b 2b       	or	r23, r27

				case 1: 
					setColor_RGB(i, RGBtoColor(0x00, 0xFF - pos, pos)); break;

				case 2:
					setColor_RGB(i, RGBtoColor(pos, 0x00, 0xFF - pos)); break;
 86c:	ce 01       	movw	r24, r28
 86e:	68 dd       	rcall	.-1328   	; 0x340 <setColor_RGB>
{
	uint16_t n = nCells;

	for(uint16_t j=0; j<255; j++) 
	{  // one cycle 
		for(uint16_t i=0; i<n; i++) 
 870:	21 96       	adiw	r28, 0x01	; 1
 872:	ce 15       	cp	r28, r14
 874:	df 05       	cpc	r29, r15
 876:	08 f4       	brcc	.+2      	; 0x87a <rainbow+0xcc>
 878:	b9 cf       	rjmp	.-142    	; 0x7ec <rainbow+0x3e>
				case 2:
					setColor_RGB(i, RGBtoColor(pos, 0x00, 0xFF - pos)); break;
			}  
		}
	
		show();
 87a:	c5 dd       	rcall	.-1142   	; 0x406 <show>
		delay(interval);
 87c:	c6 01       	movw	r24, r12
 87e:	b5 01       	movw	r22, r10
 880:	df dc       	rcall	.-1602   	; 0x240 <delay>

void rainbow(uint16_t interval)
{
	uint16_t n = nCells;

	for(uint16_t j=0; j<255; j++) 
 882:	0f 5f       	subi	r16, 0xFF	; 255
 884:	1f 4f       	sbci	r17, 0xFF	; 255
 886:	0f 3f       	cpi	r16, 0xFF	; 255
 888:	11 05       	cpc	r17, r1
 88a:	19 f0       	breq	.+6      	; 0x892 <rainbow+0xe4>
}



void rainbow(uint16_t interval)
{
 88c:	c0 e0       	ldi	r28, 0x00	; 0
 88e:	d0 e0       	ldi	r29, 0x00	; 0
 890:	f0 cf       	rjmp	.-32     	; 0x872 <rainbow+0xc4>
		}
	
		show();
		delay(interval);
	}
}
 892:	df 91       	pop	r29
 894:	cf 91       	pop	r28
 896:	1f 91       	pop	r17
 898:	0f 91       	pop	r16
 89a:	ff 90       	pop	r15
 89c:	ef 90       	pop	r14
 89e:	df 90       	pop	r13
 8a0:	cf 90       	pop	r12
 8a2:	bf 90       	pop	r11
 8a4:	af 90       	pop	r10
 8a6:	9f 90       	pop	r9
 8a8:	8f 90       	pop	r8
 8aa:	7f 90       	pop	r7
 8ac:	6f 90       	pop	r6
 8ae:	08 95       	ret

000008b0 <__mulsi3>:
 8b0:	62 9f       	mul	r22, r18
 8b2:	d0 01       	movw	r26, r0
 8b4:	73 9f       	mul	r23, r19
 8b6:	f0 01       	movw	r30, r0
 8b8:	82 9f       	mul	r24, r18
 8ba:	e0 0d       	add	r30, r0
 8bc:	f1 1d       	adc	r31, r1
 8be:	64 9f       	mul	r22, r20
 8c0:	e0 0d       	add	r30, r0
 8c2:	f1 1d       	adc	r31, r1
 8c4:	92 9f       	mul	r25, r18
 8c6:	f0 0d       	add	r31, r0
 8c8:	83 9f       	mul	r24, r19
 8ca:	f0 0d       	add	r31, r0
 8cc:	74 9f       	mul	r23, r20
 8ce:	f0 0d       	add	r31, r0
 8d0:	65 9f       	mul	r22, r21
 8d2:	f0 0d       	add	r31, r0
 8d4:	99 27       	eor	r25, r25
 8d6:	72 9f       	mul	r23, r18
 8d8:	b0 0d       	add	r27, r0
 8da:	e1 1d       	adc	r30, r1
 8dc:	f9 1f       	adc	r31, r25
 8de:	63 9f       	mul	r22, r19
 8e0:	b0 0d       	add	r27, r0
 8e2:	e1 1d       	adc	r30, r1
 8e4:	f9 1f       	adc	r31, r25
 8e6:	bd 01       	movw	r22, r26
 8e8:	cf 01       	movw	r24, r30
 8ea:	11 24       	eor	r1, r1
 8ec:	08 95       	ret

000008ee <__udivmodqi4>:
 8ee:	99 1b       	sub	r25, r25
 8f0:	79 e0       	ldi	r23, 0x09	; 9
 8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__udivmodqi4_ep>

000008f4 <__udivmodqi4_loop>:
 8f4:	99 1f       	adc	r25, r25
 8f6:	96 17       	cp	r25, r22
 8f8:	08 f0       	brcs	.+2      	; 0x8fc <__udivmodqi4_ep>
 8fa:	96 1b       	sub	r25, r22

000008fc <__udivmodqi4_ep>:
 8fc:	88 1f       	adc	r24, r24
 8fe:	7a 95       	dec	r23
 900:	c9 f7       	brne	.-14     	; 0x8f4 <__udivmodqi4_loop>
 902:	80 95       	com	r24
 904:	08 95       	ret

00000906 <__udivmodhi4>:
 906:	aa 1b       	sub	r26, r26
 908:	bb 1b       	sub	r27, r27
 90a:	51 e1       	ldi	r21, 0x11	; 17
 90c:	07 c0       	rjmp	.+14     	; 0x91c <__udivmodhi4_ep>

0000090e <__udivmodhi4_loop>:
 90e:	aa 1f       	adc	r26, r26
 910:	bb 1f       	adc	r27, r27
 912:	a6 17       	cp	r26, r22
 914:	b7 07       	cpc	r27, r23
 916:	10 f0       	brcs	.+4      	; 0x91c <__udivmodhi4_ep>
 918:	a6 1b       	sub	r26, r22
 91a:	b7 0b       	sbc	r27, r23

0000091c <__udivmodhi4_ep>:
 91c:	88 1f       	adc	r24, r24
 91e:	99 1f       	adc	r25, r25
 920:	5a 95       	dec	r21
 922:	a9 f7       	brne	.-22     	; 0x90e <__udivmodhi4_loop>
 924:	80 95       	com	r24
 926:	90 95       	com	r25
 928:	bc 01       	movw	r22, r24
 92a:	cd 01       	movw	r24, r26
 92c:	08 95       	ret

0000092e <__udivmodsi4>:
 92e:	a1 e2       	ldi	r26, 0x21	; 33
 930:	1a 2e       	mov	r1, r26
 932:	aa 1b       	sub	r26, r26
 934:	bb 1b       	sub	r27, r27
 936:	fd 01       	movw	r30, r26
 938:	0d c0       	rjmp	.+26     	; 0x954 <__udivmodsi4_ep>

0000093a <__udivmodsi4_loop>:
 93a:	aa 1f       	adc	r26, r26
 93c:	bb 1f       	adc	r27, r27
 93e:	ee 1f       	adc	r30, r30
 940:	ff 1f       	adc	r31, r31
 942:	a2 17       	cp	r26, r18
 944:	b3 07       	cpc	r27, r19
 946:	e4 07       	cpc	r30, r20
 948:	f5 07       	cpc	r31, r21
 94a:	20 f0       	brcs	.+8      	; 0x954 <__udivmodsi4_ep>
 94c:	a2 1b       	sub	r26, r18
 94e:	b3 0b       	sbc	r27, r19
 950:	e4 0b       	sbc	r30, r20
 952:	f5 0b       	sbc	r31, r21

00000954 <__udivmodsi4_ep>:
 954:	66 1f       	adc	r22, r22
 956:	77 1f       	adc	r23, r23
 958:	88 1f       	adc	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	1a 94       	dec	r1
 95e:	69 f7       	brne	.-38     	; 0x93a <__udivmodsi4_loop>
 960:	60 95       	com	r22
 962:	70 95       	com	r23
 964:	80 95       	com	r24
 966:	90 95       	com	r25
 968:	9b 01       	movw	r18, r22
 96a:	ac 01       	movw	r20, r24
 96c:	bd 01       	movw	r22, r26
 96e:	cf 01       	movw	r24, r30
 970:	08 95       	ret

00000972 <malloc>:
 972:	cf 93       	push	r28
 974:	df 93       	push	r29
 976:	82 30       	cpi	r24, 0x02	; 2
 978:	91 05       	cpc	r25, r1
 97a:	10 f4       	brcc	.+4      	; 0x980 <malloc+0xe>
 97c:	82 e0       	ldi	r24, 0x02	; 2
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	e0 91 77 00 	lds	r30, 0x0077
 984:	f0 91 78 00 	lds	r31, 0x0078
 988:	40 e0       	ldi	r20, 0x00	; 0
 98a:	50 e0       	ldi	r21, 0x00	; 0
 98c:	20 e0       	ldi	r18, 0x00	; 0
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	26 c0       	rjmp	.+76     	; 0x9de <malloc+0x6c>
 992:	60 81       	ld	r22, Z
 994:	71 81       	ldd	r23, Z+1	; 0x01
 996:	68 17       	cp	r22, r24
 998:	79 07       	cpc	r23, r25
 99a:	e0 f0       	brcs	.+56     	; 0x9d4 <malloc+0x62>
 99c:	68 17       	cp	r22, r24
 99e:	79 07       	cpc	r23, r25
 9a0:	81 f4       	brne	.+32     	; 0x9c2 <malloc+0x50>
 9a2:	82 81       	ldd	r24, Z+2	; 0x02
 9a4:	93 81       	ldd	r25, Z+3	; 0x03
 9a6:	21 15       	cp	r18, r1
 9a8:	31 05       	cpc	r19, r1
 9aa:	31 f0       	breq	.+12     	; 0x9b8 <malloc+0x46>
 9ac:	d9 01       	movw	r26, r18
 9ae:	13 96       	adiw	r26, 0x03	; 3
 9b0:	9c 93       	st	X, r25
 9b2:	8e 93       	st	-X, r24
 9b4:	12 97       	sbiw	r26, 0x02	; 2
 9b6:	2b c0       	rjmp	.+86     	; 0xa0e <malloc+0x9c>
 9b8:	90 93 78 00 	sts	0x0078, r25
 9bc:	80 93 77 00 	sts	0x0077, r24
 9c0:	26 c0       	rjmp	.+76     	; 0xa0e <malloc+0x9c>
 9c2:	41 15       	cp	r20, r1
 9c4:	51 05       	cpc	r21, r1
 9c6:	19 f0       	breq	.+6      	; 0x9ce <malloc+0x5c>
 9c8:	64 17       	cp	r22, r20
 9ca:	75 07       	cpc	r23, r21
 9cc:	18 f4       	brcc	.+6      	; 0x9d4 <malloc+0x62>
 9ce:	ab 01       	movw	r20, r22
 9d0:	e9 01       	movw	r28, r18
 9d2:	df 01       	movw	r26, r30
 9d4:	9f 01       	movw	r18, r30
 9d6:	72 81       	ldd	r23, Z+2	; 0x02
 9d8:	63 81       	ldd	r22, Z+3	; 0x03
 9da:	e7 2f       	mov	r30, r23
 9dc:	f6 2f       	mov	r31, r22
 9de:	30 97       	sbiw	r30, 0x00	; 0
 9e0:	c1 f6       	brne	.-80     	; 0x992 <malloc+0x20>
 9e2:	41 15       	cp	r20, r1
 9e4:	51 05       	cpc	r21, r1
 9e6:	01 f1       	breq	.+64     	; 0xa28 <malloc+0xb6>
 9e8:	48 1b       	sub	r20, r24
 9ea:	59 0b       	sbc	r21, r25
 9ec:	44 30       	cpi	r20, 0x04	; 4
 9ee:	51 05       	cpc	r21, r1
 9f0:	80 f4       	brcc	.+32     	; 0xa12 <malloc+0xa0>
 9f2:	12 96       	adiw	r26, 0x02	; 2
 9f4:	8d 91       	ld	r24, X+
 9f6:	9c 91       	ld	r25, X
 9f8:	13 97       	sbiw	r26, 0x03	; 3
 9fa:	20 97       	sbiw	r28, 0x00	; 0
 9fc:	19 f0       	breq	.+6      	; 0xa04 <malloc+0x92>
 9fe:	9b 83       	std	Y+3, r25	; 0x03
 a00:	8a 83       	std	Y+2, r24	; 0x02
 a02:	04 c0       	rjmp	.+8      	; 0xa0c <malloc+0x9a>
 a04:	90 93 78 00 	sts	0x0078, r25
 a08:	80 93 77 00 	sts	0x0077, r24
 a0c:	fd 01       	movw	r30, r26
 a0e:	32 96       	adiw	r30, 0x02	; 2
 a10:	46 c0       	rjmp	.+140    	; 0xa9e <malloc+0x12c>
 a12:	fd 01       	movw	r30, r26
 a14:	e4 0f       	add	r30, r20
 a16:	f5 1f       	adc	r31, r21
 a18:	81 93       	st	Z+, r24
 a1a:	91 93       	st	Z+, r25
 a1c:	42 50       	subi	r20, 0x02	; 2
 a1e:	50 40       	sbci	r21, 0x00	; 0
 a20:	11 96       	adiw	r26, 0x01	; 1
 a22:	5c 93       	st	X, r21
 a24:	4e 93       	st	-X, r20
 a26:	3b c0       	rjmp	.+118    	; 0xa9e <malloc+0x12c>
 a28:	20 91 75 00 	lds	r18, 0x0075
 a2c:	30 91 76 00 	lds	r19, 0x0076
 a30:	21 15       	cp	r18, r1
 a32:	31 05       	cpc	r19, r1
 a34:	41 f4       	brne	.+16     	; 0xa46 <malloc+0xd4>
 a36:	20 91 67 00 	lds	r18, 0x0067
 a3a:	30 91 68 00 	lds	r19, 0x0068
 a3e:	30 93 76 00 	sts	0x0076, r19
 a42:	20 93 75 00 	sts	0x0075, r18
 a46:	20 91 69 00 	lds	r18, 0x0069
 a4a:	30 91 6a 00 	lds	r19, 0x006A
 a4e:	21 15       	cp	r18, r1
 a50:	31 05       	cpc	r19, r1
 a52:	41 f4       	brne	.+16     	; 0xa64 <malloc+0xf2>
 a54:	2d b7       	in	r18, 0x3d	; 61
 a56:	3e b7       	in	r19, 0x3e	; 62
 a58:	40 91 65 00 	lds	r20, 0x0065
 a5c:	50 91 66 00 	lds	r21, 0x0066
 a60:	24 1b       	sub	r18, r20
 a62:	35 0b       	sbc	r19, r21
 a64:	e0 91 75 00 	lds	r30, 0x0075
 a68:	f0 91 76 00 	lds	r31, 0x0076
 a6c:	e2 17       	cp	r30, r18
 a6e:	f3 07       	cpc	r31, r19
 a70:	a0 f4       	brcc	.+40     	; 0xa9a <malloc+0x128>
 a72:	2e 1b       	sub	r18, r30
 a74:	3f 0b       	sbc	r19, r31
 a76:	28 17       	cp	r18, r24
 a78:	39 07       	cpc	r19, r25
 a7a:	78 f0       	brcs	.+30     	; 0xa9a <malloc+0x128>
 a7c:	ac 01       	movw	r20, r24
 a7e:	4e 5f       	subi	r20, 0xFE	; 254
 a80:	5f 4f       	sbci	r21, 0xFF	; 255
 a82:	24 17       	cp	r18, r20
 a84:	35 07       	cpc	r19, r21
 a86:	48 f0       	brcs	.+18     	; 0xa9a <malloc+0x128>
 a88:	4e 0f       	add	r20, r30
 a8a:	5f 1f       	adc	r21, r31
 a8c:	50 93 76 00 	sts	0x0076, r21
 a90:	40 93 75 00 	sts	0x0075, r20
 a94:	81 93       	st	Z+, r24
 a96:	91 93       	st	Z+, r25
 a98:	02 c0       	rjmp	.+4      	; 0xa9e <malloc+0x12c>
 a9a:	e0 e0       	ldi	r30, 0x00	; 0
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	cf 01       	movw	r24, r30
 aa0:	df 91       	pop	r29
 aa2:	cf 91       	pop	r28
 aa4:	08 95       	ret

00000aa6 <free>:
 aa6:	cf 93       	push	r28
 aa8:	df 93       	push	r29
 aaa:	00 97       	sbiw	r24, 0x00	; 0
 aac:	09 f4       	brne	.+2      	; 0xab0 <free+0xa>
 aae:	91 c0       	rjmp	.+290    	; 0xbd2 <free+0x12c>
 ab0:	fc 01       	movw	r30, r24
 ab2:	32 97       	sbiw	r30, 0x02	; 2
 ab4:	13 82       	std	Z+3, r1	; 0x03
 ab6:	12 82       	std	Z+2, r1	; 0x02
 ab8:	60 91 77 00 	lds	r22, 0x0077
 abc:	70 91 78 00 	lds	r23, 0x0078
 ac0:	61 15       	cp	r22, r1
 ac2:	71 05       	cpc	r23, r1
 ac4:	81 f4       	brne	.+32     	; 0xae6 <free+0x40>
 ac6:	20 81       	ld	r18, Z
 ac8:	31 81       	ldd	r19, Z+1	; 0x01
 aca:	28 0f       	add	r18, r24
 acc:	39 1f       	adc	r19, r25
 ace:	80 91 75 00 	lds	r24, 0x0075
 ad2:	90 91 76 00 	lds	r25, 0x0076
 ad6:	82 17       	cp	r24, r18
 ad8:	93 07       	cpc	r25, r19
 ada:	99 f5       	brne	.+102    	; 0xb42 <free+0x9c>
 adc:	f0 93 76 00 	sts	0x0076, r31
 ae0:	e0 93 75 00 	sts	0x0075, r30
 ae4:	76 c0       	rjmp	.+236    	; 0xbd2 <free+0x12c>
 ae6:	db 01       	movw	r26, r22
 ae8:	80 e0       	ldi	r24, 0x00	; 0
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <free+0x4c>
 aee:	cd 01       	movw	r24, r26
 af0:	d9 01       	movw	r26, r18
 af2:	ae 17       	cp	r26, r30
 af4:	bf 07       	cpc	r27, r31
 af6:	48 f4       	brcc	.+18     	; 0xb0a <free+0x64>
 af8:	12 96       	adiw	r26, 0x02	; 2
 afa:	2d 91       	ld	r18, X+
 afc:	3c 91       	ld	r19, X
 afe:	13 97       	sbiw	r26, 0x03	; 3
 b00:	21 15       	cp	r18, r1
 b02:	31 05       	cpc	r19, r1
 b04:	a1 f7       	brne	.-24     	; 0xaee <free+0x48>
 b06:	cd 01       	movw	r24, r26
 b08:	21 c0       	rjmp	.+66     	; 0xb4c <free+0xa6>
 b0a:	b3 83       	std	Z+3, r27	; 0x03
 b0c:	a2 83       	std	Z+2, r26	; 0x02
 b0e:	ef 01       	movw	r28, r30
 b10:	49 91       	ld	r20, Y+
 b12:	59 91       	ld	r21, Y+
 b14:	9e 01       	movw	r18, r28
 b16:	24 0f       	add	r18, r20
 b18:	35 1f       	adc	r19, r21
 b1a:	a2 17       	cp	r26, r18
 b1c:	b3 07       	cpc	r27, r19
 b1e:	79 f4       	brne	.+30     	; 0xb3e <free+0x98>
 b20:	2d 91       	ld	r18, X+
 b22:	3c 91       	ld	r19, X
 b24:	11 97       	sbiw	r26, 0x01	; 1
 b26:	24 0f       	add	r18, r20
 b28:	35 1f       	adc	r19, r21
 b2a:	2e 5f       	subi	r18, 0xFE	; 254
 b2c:	3f 4f       	sbci	r19, 0xFF	; 255
 b2e:	31 83       	std	Z+1, r19	; 0x01
 b30:	20 83       	st	Z, r18
 b32:	12 96       	adiw	r26, 0x02	; 2
 b34:	2d 91       	ld	r18, X+
 b36:	3c 91       	ld	r19, X
 b38:	13 97       	sbiw	r26, 0x03	; 3
 b3a:	33 83       	std	Z+3, r19	; 0x03
 b3c:	22 83       	std	Z+2, r18	; 0x02
 b3e:	00 97       	sbiw	r24, 0x00	; 0
 b40:	29 f4       	brne	.+10     	; 0xb4c <free+0xa6>
 b42:	f0 93 78 00 	sts	0x0078, r31
 b46:	e0 93 77 00 	sts	0x0077, r30
 b4a:	43 c0       	rjmp	.+134    	; 0xbd2 <free+0x12c>
 b4c:	dc 01       	movw	r26, r24
 b4e:	13 96       	adiw	r26, 0x03	; 3
 b50:	fc 93       	st	X, r31
 b52:	ee 93       	st	-X, r30
 b54:	12 97       	sbiw	r26, 0x02	; 2
 b56:	4d 91       	ld	r20, X+
 b58:	5d 91       	ld	r21, X+
 b5a:	a4 0f       	add	r26, r20
 b5c:	b5 1f       	adc	r27, r21
 b5e:	ea 17       	cp	r30, r26
 b60:	fb 07       	cpc	r31, r27
 b62:	69 f4       	brne	.+26     	; 0xb7e <free+0xd8>
 b64:	20 81       	ld	r18, Z
 b66:	31 81       	ldd	r19, Z+1	; 0x01
 b68:	24 0f       	add	r18, r20
 b6a:	35 1f       	adc	r19, r21
 b6c:	2e 5f       	subi	r18, 0xFE	; 254
 b6e:	3f 4f       	sbci	r19, 0xFF	; 255
 b70:	ec 01       	movw	r28, r24
 b72:	39 83       	std	Y+1, r19	; 0x01
 b74:	28 83       	st	Y, r18
 b76:	22 81       	ldd	r18, Z+2	; 0x02
 b78:	33 81       	ldd	r19, Z+3	; 0x03
 b7a:	3b 83       	std	Y+3, r19	; 0x03
 b7c:	2a 83       	std	Y+2, r18	; 0x02
 b7e:	e0 e0       	ldi	r30, 0x00	; 0
 b80:	f0 e0       	ldi	r31, 0x00	; 0
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <free+0xe2>
 b84:	fb 01       	movw	r30, r22
 b86:	bc 01       	movw	r22, r24
 b88:	db 01       	movw	r26, r22
 b8a:	12 96       	adiw	r26, 0x02	; 2
 b8c:	8d 91       	ld	r24, X+
 b8e:	9c 91       	ld	r25, X
 b90:	13 97       	sbiw	r26, 0x03	; 3
 b92:	00 97       	sbiw	r24, 0x00	; 0
 b94:	b9 f7       	brne	.-18     	; 0xb84 <free+0xde>
 b96:	9b 01       	movw	r18, r22
 b98:	2e 5f       	subi	r18, 0xFE	; 254
 b9a:	3f 4f       	sbci	r19, 0xFF	; 255
 b9c:	8d 91       	ld	r24, X+
 b9e:	9c 91       	ld	r25, X
 ba0:	11 97       	sbiw	r26, 0x01	; 1
 ba2:	82 0f       	add	r24, r18
 ba4:	93 1f       	adc	r25, r19
 ba6:	40 91 75 00 	lds	r20, 0x0075
 baa:	50 91 76 00 	lds	r21, 0x0076
 bae:	48 17       	cp	r20, r24
 bb0:	59 07       	cpc	r21, r25
 bb2:	79 f4       	brne	.+30     	; 0xbd2 <free+0x12c>
 bb4:	30 97       	sbiw	r30, 0x00	; 0
 bb6:	29 f4       	brne	.+10     	; 0xbc2 <free+0x11c>
 bb8:	10 92 78 00 	sts	0x0078, r1
 bbc:	10 92 77 00 	sts	0x0077, r1
 bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <free+0x120>
 bc2:	13 82       	std	Z+3, r1	; 0x03
 bc4:	12 82       	std	Z+2, r1	; 0x02
 bc6:	22 50       	subi	r18, 0x02	; 2
 bc8:	30 40       	sbci	r19, 0x00	; 0
 bca:	30 93 76 00 	sts	0x0076, r19
 bce:	20 93 75 00 	sts	0x0075, r18
 bd2:	df 91       	pop	r29
 bd4:	cf 91       	pop	r28
 bd6:	08 95       	ret

00000bd8 <memset>:
 bd8:	dc 01       	movw	r26, r24
 bda:	01 c0       	rjmp	.+2      	; 0xbde <memset+0x6>
 bdc:	6d 93       	st	X+, r22
 bde:	41 50       	subi	r20, 0x01	; 1
 be0:	50 40       	sbci	r21, 0x00	; 0
 be2:	e0 f7       	brcc	.-8      	; 0xbdc <memset+0x4>
 be4:	08 95       	ret

00000be6 <_exit>:
 be6:	f8 94       	cli

00000be8 <__stop_program>:
 be8:	ff cf       	rjmp	.-2      	; 0xbe8 <__stop_program>
